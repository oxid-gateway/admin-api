// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const countUpstreams = `-- name: CountUpstreams :one
SELECT COUNT(*) FROM upstreams
WHERE name like $1
`

func (q *Queries) CountUpstreams(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, countUpstreams, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUpstream = `-- name: CreateUpstream :one
INSERT INTO upstreams (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateUpstream(ctx context.Context, name string) (*Upstream, error) {
	row := q.db.QueryRow(ctx, createUpstream, name)
	var i Upstream
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const deleteUpstream = `-- name: DeleteUpstream :one
DELETE FROM upstreams WHERE id = $1 RETURNING id, name
`

func (q *Queries) DeleteUpstream(ctx context.Context, id int32) (*Upstream, error) {
	row := q.db.QueryRow(ctx, deleteUpstream, id)
	var i Upstream
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getUpstreamById = `-- name: GetUpstreamById :one
SELECT id, name FROM upstreams
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUpstreamById(ctx context.Context, id int32) (*Upstream, error) {
	row := q.db.QueryRow(ctx, getUpstreamById, id)
	var i Upstream
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getUpstreamConflic = `-- name: GetUpstreamConflic :one
SELECT id, name FROM upstreams
WHERE name = $2 and id <> $1
LIMIT 1
`

type GetUpstreamConflicParams struct {
	ID   int32
	Name string
}

func (q *Queries) GetUpstreamConflic(ctx context.Context, arg GetUpstreamConflicParams) (*Upstream, error) {
	row := q.db.QueryRow(ctx, getUpstreamConflic, arg.ID, arg.Name)
	var i Upstream
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const listUpstreams = `-- name: ListUpstreams :many
SELECT id, name FROM upstreams
WHERE name like $3
LIMIT $1 
OFFSET $2
`

type ListUpstreamsParams struct {
	Limit  int32
	Offset int32
	Name   string
}

func (q *Queries) ListUpstreams(ctx context.Context, arg ListUpstreamsParams) ([]*Upstream, error) {
	rows, err := q.db.Query(ctx, listUpstreams, arg.Limit, arg.Offset, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUpstream = `-- name: UpdateUpstream :exec
UPDATE upstreams SET name = $2 WHERE id = $1
`

type UpdateUpstreamParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateUpstream(ctx context.Context, arg UpdateUpstreamParams) error {
	_, err := q.db.Exec(ctx, updateUpstream, arg.ID, arg.Name)
	return err
}
